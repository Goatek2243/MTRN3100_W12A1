#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN

#include "Matrix.hpp"
#include "doctest.h"

TEST_CASE("Matrix()") {
    mtrn3100::Matrix m;
    CHECK(m.rows() == 0);
    CHECK(m.cols() == 0);
}

TEST_CASE("Matrix(int, int)") {
    mtrn3100::Matrix m(1, 2);
    CHECK(m.rows() == 1);
    CHECK(m.cols() == 2);
    CHECK(m(0, 0) == 0);
    CHECK(m(0, 1) == 0);
}

TEST_CASE("Matrix(int, int, value)") {
    mtrn3100::Matrix m(2, 2, 1.1);
    CHECK(m.rows() == 2);
    CHECK(m.cols() == 2);
    CHECK(m(0, 0) == doctest::Approx(1.1));
    CHECK(m(0, 1) == doctest::Approx(1.1));
    CHECK(m(1, 0) == doctest::Approx(1.1));
    CHECK(m(1, 1) == doctest::Approx(1.1));
}

TEST_CASE("operator+(Matrix const&, Matrix const&)") {
    mtrn3100::Matrix m1(2, 2, 1);
    mtrn3100::Matrix m2(2, 2, 2);
    mtrn3100::Matrix m3(2, 2, 3);
    CHECK(m1 + m2 == m3);
}

TEST_CASE("operator-(Matrix const&, Matrix const&)") {
    mtrn3100::Matrix m1(2, 2, 1);
    mtrn3100::Matrix m2(2, 2, 2);
    mtrn3100::Matrix m3(2, 2, -1);
    CHECK(m1 - m2 == m3);
}

TEST_CASE("operator*(Matrix const&, Matrix const&)") {
    mtrn3100::Matrix m1;
    mtrn3100::Matrix m2;
    mtrn3100::Matrix e;

    SUBCASE("0 x 0 * 0 x 0") {
        m1 = mtrn3100::Matrix(0, 0);
        m2 = mtrn3100::Matrix(0, 0);
        e = mtrn3100::Matrix(0, 0);
    }

    SUBCASE("3 x 0 * 0 x 3") {
        m1 = mtrn3100::Matrix(3, 0);
        m2 = mtrn3100::Matrix(0, 3);
        e = mtrn3100::Matrix(3, 3);
    }

    SUBCASE("1 x 3 * 3 x 1") {
        m1 = mtrn3100::Matrix(1, 3, 2);
        m2 = mtrn3100::Matrix(3, 1, 5);
        e = mtrn3100::Matrix(1, 1, 30);
    }

    CHECK(m1 * m2 == e);
}

TEST_CASE("operator/(Matrix const&, const double)") {
    mtrn3100::Matrix m1(2, 2, 2);
    mtrn3100::Matrix m2(2, 2, 1);
    CHECK(m1 / 2.0f == m2);
}

TEST_CASE("transpose(Matrix const&)") {
    mtrn3100::Matrix m1(1, 2, 1.1);
    mtrn3100::Matrix m2(2, 1, 1.1);
    CHECK(m1 == mtrn3100::Matrix::tranpose(m2));
}

TEST_CASE("inverse(Matrix const&)") {
    mtrn3100::Matrix m1, m2;

    SUBCASE("1 x 1") {
        m1 = mtrn3100::Matrix(1, 1, 4);
        m2 = mtrn3100::Matrix(1, 1, 0.25);
    }

    SUBCASE("2 x 2") {
        m1 = mtrn3100::Matrix(2, 2);
        m1(0, 0) = 1;
        m1(0, 1) = 2;
        m1(1, 0) = 3;
        m1(1, 1) = 4;
        m2 = mtrn3100::Matrix(2, 2);
        m2(0, 0) = -2.000000000000000;
        m2(0, 1) = 1.000000000000000;
        m2(1, 0) = 1.500000000000000;
        m2(1, 1) = -0.500000000000000;
    }

    SUBCASE("3 x 3") {
        m1 = mtrn3100::Matrix(3, 3);
        m1(0, 0) = 2;
        m1(0, 1) = 2;
        m1(0, 2) = 5;
        m1(1, 0) = 4;
        m1(1, 1) = 5;
        m1(1, 2) = 6;
        m1(2, 0) = 7;
        m1(2, 1) = 8;
        m1(2, 2) = 9;
        m2 = mtrn3100::Matrix(3, 3);
        m2(0, 0) = 0.333333333333333;
        m2(0, 1) = -2.444444444444443;
        m2(0, 2) = 1.444444444444444;
        m2(1, 0) = -0.666666666666667;
        m2(1, 1) = 1.888888888888888;
        m2(1, 2) = -0.888888888888888;
        m2(2, 0) = 0.333333333333333;
        m2(2, 1) = 0.222222222222222;
        m2(2, 2) = -0.222222222222222;
    }

    SUBCASE("4 x 4") {
        m1 = mtrn3100::Matrix(4, 4);
        m1(0, 0) = 1;
        m1(0, 1) = 2;
        m1(0, 2) = 3;
        m1(0, 3) = 4;
        m1(1, 0) = 1;
        m1(1, 1) = 3;
        m1(1, 2) = 5;
        m1(1, 3) = 7;
        m1(2, 0) = 3;
        m1(2, 1) = 2;
        m1(2, 2) = 6;
        m1(2, 3) = 2;
        m1(3, 0) = 5;
        m1(3, 1) = 9;
        m1(3, 2) = 4;
        m1(3, 3) = 1;
        m2 = mtrn3100::Matrix(4, 4);
        m1(0, 0) = 4.000000000000003;
        m1(0, 1) = -2.258064516129034;
        m1(0, 2) = -0.032258064516129;
        m1(0, 3) = -0.129032258064516;
        m1(1, 0) = -1.500000000000001;
        m1(1, 1) = 0.854838709677420;
        m1(1, 2) = -0.080645161290322;
        m1(1, 3) = 0.177419354838710;
        m1(2, 0) = -2.000000000000000;
        m1(2, 1) = 1.064516129032258;
        m1(2, 2) = 0.258064516129032;
        m1(2, 3) = 0.032258064516129;
        m1(3, 0) = 1.500000000000000;
        m1(3, 1) = -0.661290322580645;
        m1(3, 2) = -0.145161290322581;
        m1(3, 3) = -0.080645161290323;
    }

    SUBCASE("5 x 5") {
        m1 = mtrn3100::Matrix(5, 5);
        m1(0, 0) = 0;
        m1(0, 1) = 2;
        m1(0, 2) = 4;
        m1(0, 3) = 6;
        m1(0, 4) = 8;
        m1(1, 0) = 1;
        m1(1, 1) = 2;
        m1(1, 2) = 3;
        m1(1, 3) = 4;
        m1(1, 4) = 5;
        m1(2, 0) = 5;
        m1(2, 1) = 8;
        m1(2, 2) = 1;
        m1(2, 3) = 4;
        m1(2, 4) = 7;
        m1(3, 0) = 9;
        m1(3, 1) = 2;
        m1(3, 2) = 0;
        m1(3, 3) = 0;
        m1(3, 4) = 0;
        m1(4, 0) = 0;
        m1(4, 1) = 0;
        m1(4, 2) = 0;
        m1(4, 3) = 0;
        m1(4, 4) = 1;
        m2 = mtrn3100::Matrix(5, 5);
        m1(0, 0) = 0.114285714285714;
        m1(0, 1) = -0.142857142857143;
        m1(0, 2) = -0.028571428571429;
        m1(0, 3) = 0.142857142857143;
        m1(0, 4) = 0.000000000000000;
        m1(1, 0) = -0.514285714285714;
        m1(1, 1) = 0.642857142857142;
        m1(1, 2) = 0.128571428571429;
        m1(1, 3) = -0.142857142857143;
        m1(1, 4) = -0.000000000000000;
        m1(2, 0) = -1.314285714285713;
        m1(2, 1) = 2.142857142857141;
        m1(2, 2) = -0.171428571428571;
        m1(2, 3) = -0.142857142857143;
        m1(2, 4) = 1.000000000000000;
        m1(3, 0) = 1.214285714285713;
        m1(3, 1) = -1.642857142857141;
        m1(3, 2) = 0.071428571428571;
        m1(3, 3) = 0.142857142857143;
        m1(3, 4) = -2.000000000000000;
        m1(4, 0) = 0;
        m1(4, 1) = 0;
        m1(4, 2) = 0;
        m1(4, 3) = 0;
        m1(4, 4) = 1.000000000000000;
    }

    SUBCASE("6 x 6") {
        m1 = mtrn3100::Matrix(6, 6);
        m1(0, 0) = 0;
        m1(0, 1) = 2;
        m1(0, 2) = 4;
        m1(0, 3) = 6;
        m1(0, 4) = 8;
        m1(0, 5) = 1;
        m1(1, 0) = 1;
        m1(1, 1) = 2;
        m1(1, 2) = 3;
        m1(1, 3) = 4;
        m1(1, 4) = 5;
        m1(1, 5) = 10;
        m1(2, 0) = 5;
        m1(2, 1) = 8;
        m1(2, 2) = 1;
        m1(2, 3) = 4;
        m1(2, 4) = 7;
        m1(2, 5) = 11;
        m1(3, 0) = 9;
        m1(3, 1) = 2;
        m1(3, 2) = 0;
        m1(3, 3) = 0;
        m1(3, 4) = 0;
        m1(3, 5) = 2;
        m1(4, 0) = 0;
        m1(4, 1) = 0;
        m1(4, 2) = 0;
        m1(4, 3) = 0;
        m1(4, 4) = 1;
        m1(4, 5) = 1;
        m1(5, 0) = 1;
        m1(5, 1) = 1;
        m1(5, 2) = 1;
        m1(5, 3) = 1;
        m1(5, 4) = 1;
        m1(5, 5) = 1;
        m2 = mtrn3100::Matrix(6, 6);
        m1(0, 0) = 0.035294117647059;
        m1(0, 1) = 0.015126050420168;
        m1(0, 2) = -0.028571428571429;
        m1(0, 3) = 0.142857142857143;
        m1(0, 4) = 0.000000000000000;
        m1(0, 5) = -0.157983193277311;
        m1(1, 0) = -0.100000000000000;
        m1(1, 1) = -0.185714285714285;
        m1(1, 2) = 0.128571428571429;
        m1(1, 3) = -0.142857142857143;
        m1(1, 4) = -0.000000000000000;
        m1(1, 5) = 0.828571428571428;
        m1(2, 0) = -0.200000000000000;
        m1(2, 1) = -0.085714285714285;
        m1(2, 2) = -0.171428571428571;
        m1(2, 3) = -0.142857142857143;
        m1(2, 4) = 1.000000000000000;
        m1(2, 5) = 2.228571428571428;
        m1(3, 0) = 0.264705882352941;
        m1(3, 1) = 0.256302521008403;
        m1(3, 2) = 0.071428571428571;
        m1(3, 3) = 0.142857142857143;
        m1(3, 4) = -1.999999999999999;
        m1(3, 5) = -1.899159663865546;
        m1(4, 0) = 0.058823529411765;
        m1(4, 1) = -0.117647058823529;
        m1(4, 2) = -0.000000000000000;
        m1(4, 3) = -0.000000000000000;
        m1(4, 4) = 1.000000000000000;
        m1(4, 5) = 0.117647058823529;
        m1(5, 0) = -0.058823529411765;
        m1(5, 1) = 0.117647058823529;
        m1(5, 2) = 0.000000000000000;
        m1(5, 3) = 0.000000000000000;
        m1(5, 4) = 0.000000000000000;
        m1(5, 5) = -0.117647058823529;
    }

    CHECK(m1 == mtrn3100::Matrix::inverse(m2));
}

TEST_CASE("operator float()") {
    mtrn3100::Matrix m1(1, 1, 2.1);
    CHECK(static_cast<float>(m1) == doctest::Approx(2.1));
}

TEST_CASE("eye()") {
    const size_t size = 5;
    mtrn3100::Matrix m1 = mtrn3100::Matrix::eye(size);
    mtrn3100::Matrix m2(size, size, 0);
    for (size_t i = 0; i < size; i++) {
        m2(i, i) = 1;
    }
    CHECK(m1 == m2);
}
